const Discord = require('discord.js');
const { prefix, token } = require('./config.json');
const axios = require('axios');
const cheerio = require('cheerio');
const request = require('request');
const { title } = require('process');

const client = new Discord.Client();

client.once('ready', () => {
	console.log('Ready! BehemothBot is online.');
});

client.on('message', message => {
	console.log(message.content);
	if (!message.content.startsWith(prefix) || message.author.bot) return;

	const args = message.content.slice(prefix.length).trim().split(/ +/);
	const command = args.shift().toLowerCase();

	if (command === 'ping') {
		message.channel.send('pong')
	}
	else if (command === 'calljs') {
		message.channel.send('BehemothBot.js is active')
	}
    
	else if (command === 'weather') {
		const country = args[0]
		const state = args[1]
		const city = args[2]

		const getWeather = async () => {
			try {
				const { data } = await axios.get(
					'https://www.wunderground.com/weather/' + country + '/' + state + '/' + city + '/'
				);
				const $ = cheerio.load(data)

				const weather = $('span.test-true.wu-unit.wu-unit-temperature.is-degree-visible.ng-star-inserted > span.wu-value.wu-value-to').text()
				const weatherResults = weather.charAt(2) + weather.charAt(1)
				const Embed = new Discord.MessageEmbed()
					.setColor('#0099ff')
					.setTitle(`Weather for ${city} `)
					.setDescription(`${weatherResults}`)
					.setTimestamp()
					.setFooter('BehemothBot');
				message.channel.send(Embed);
			} catch (error) {
				console.log(error)
				message.channel.send(error)
            }
		}
		getWeather()
    }
	else if (command === 'covid') {
		const getCovid = async () => {
			try {
				const { data } = await axios.get(
					'https://covidusa.net/'
				);
				const $ = cheerio.load(data);

				const covidStats = $('div.stat.py-4 > div.stat-value.display-4.text-warning').text()
				const Embed = new Discord.MessageEmbed()
					.setColor('#0099ff')
					.setTitle('Covid-19 Statistics - US')
					.setDescription(`(1st is current, 2nd is 7 day projection, 3rd is 14 day projection, and 4th is 30 day projection) \n${covidStats}`)
					.setTimestamp()
					.setFooter('BehemothBot');
				message.channel.send(Embed);
			} catch (error) {
				console.log(error)
				message.channel.send(error)
            }
		}
		getCovid()
	}
	else if (command === 'wikipedia') {
		const getCovid = async () => {
			try {
				const { data } = await axios.get(
					'https://en.wikipedia.org/wiki/Special:Random'
				);
				const $ = cheerio.load(data);

				const wikipediatitle = $('h1.firstHeading').text()
				const wikipediacontents = $('p').text()
				const Embed = new Discord.MessageEmbed()
					.setColor('#0099ff')
					.setTitle(wikipediatitle)
					.setDescription(wikipediacontents.substring(0, 500))
					.setTimestamp()
					.setFooter('BehemothBot');
				message.channel.send(Embed);
			} catch (error) {
				console.log(error)
				message.channel.send(error)
			}
		}
		getCovid()
	}
	else if (command === 'number') {
		const number = args[0]
		const getNumber = async () => {
			try {
				const { data } = await axios.get(
					'https://www.calculatorsoup.com/calculators/conversions/numberstowords.php?number=' + number + '&format=words&letter_case=lowercase&action=solve'
				);
				const $ = cheerio.load(data);

				const getAnswer = $('div.still').text()
				const Embed = new Discord.MessageEmbed()
					.setColor('#0099ff')
					.setTitle(number)
					.setDescription(getAnswer)
					.setTimestamp()
					.setFooter('BehemothBot');
				message.channel.send(Embed);
			} catch (error) {
				console.log(error)
				message.channel.send(error)
            }
		}
		getNumber()
    }
	else if (command === 'check') {
		message.channel.send('If you are only seeing this message then BehemothBot is partially down (C# Portion). If you are only seeing this then most commands will not work because BehemothBot is mostly built upon a D# client.')
    }
	else if (command === 'reddit') {
		subreddit = args[0]
		age = args[1]
		const getPost = async () => {
			try {
				const { data } = await axios.get(
					'https://old.reddit.com/r/' + subreddit + '/' + age + '/'
				);
				const $ = cheerio.load(data);

				const a = $("img").attr("href")
				const img = $('img').attr("src")
				href = $('div > p.title > a').attr("href");

				var imglink = 'http://old.reddit.com' + href;
				try {
					const { data } = await axios.get(
						imglink
					);

					const $ = cheerio.load(data)
					const imgLarge = $('img.preview').attr("src")

					const Embed = new Discord.MessageEmbed()
						.setColor('#0099ff')
						.setTitle(`Reddit /r/${subreddit}`)
						.setDescription(imglink)
						.setImage(imgLarge)
						.setTimestamp()
						.setFooter('BehemothBot');
					message.channel.send(Embed);
				} catch (error) {
					console.log(error)
					message.channel.send('This post could not be found, this means the post could be a link from another site' + error)
				}
			} catch (error) {
				console.log(error)
				message.channel.send('This subreddit could not be found, make sure it was typed correctly and that the subreddit exists' + error)
			}
		}
		getPost()
	}
	else if (command === 'meme') {
		const getPost = async () => {
			try {
				const { data } = await axios.get(
					'https://old.reddit.com/r/dankmemes/new/'
				);
				const $ = cheerio.load(data);

				const a = $("img").attr("href")
				const img = $('img').attr("src")
				href = $('div > p.title > a').attr("href");

				var imglink = 'http://old.reddit.com' + href;
				try {
					const { data } = await axios.get(
						imglink
					);

					const $ = cheerio.load(data)
					const imgLarge = $('img.preview').attr("src")

					const Embed = new Discord.MessageEmbed()
						.setColor('#0099ff')
						.setTitle('Meme')
						.setDescription(imglink)
						.setImage(imgLarge)
						.setTimestamp()
						.setFooter('BehemothBot');
					message.channel.send(Embed);
				} catch (error) {
					console.log(error)
				}

			} catch (error) {
				console.log(error);
			}
		};
		getPost()
	}
	else if (command === 'ig') {
		
	}
})
client.login(token)
