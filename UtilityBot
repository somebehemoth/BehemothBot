using System;
using System.Threading.Tasks;
using DSharpPlus;
using DSharpPlus.CommandsNext;
using DSharpPlus.CommandsNext.Attributes;
using DSharpPlus.Interactivity;
using DSharpPlus.Entities;
using DSharpPlus.VoiceNext;
using DescriptionAttribute = DSharpPlus.CommandsNext.Attributes.DescriptionAttribute;


namespace DiscordBotAttempt3
{
    public static class Program
    {
        static DiscordClient discord;
        static CommandsNextModule commands;
        static InteractivityModule interactivity;
        static VoiceNextClient voice;


        static void Main(string[] args)
        {
            MainAsync(args).ConfigureAwait(false).GetAwaiter().GetResult();
        }

        static async Task MainAsync(string[] args)
        {
            discord = new DiscordClient(new DiscordConfiguration
            {
                Token = "TOKENHERE",
                TokenType = TokenType.Bot,
                UseInternalLogHandler = true,
                LogLevel = LogLevel.Debug,
            });
            commands = discord.UseCommandsNext(new CommandsNextConfiguration
            {
                StringPrefix = "-/"
            });
            discord.GuildMemberAdded += async e =>
            {
                await e.Member.SendMessageAsync($"Welcome to {e.Guild.Name}");
            };
            discord.Resumed += async e =>
            {
                await discord.GetChannelAsync(768501915104968755).Result.SendMessageAsync("Resumed client");
            };
            var cfg = discord.UseInteractivity(new InteractivityConfiguration
            {

        });
            commands.RegisterCommands<MyCommands>();

            await discord.ConnectAsync();
            await Task.Delay(-1);

            
        }

    }
    public class MyCommands
    {
        [Command("ban"), Description("Bans specified user")]
        [RequirePermissions(Permissions.BanMembers)]
        public async Task Ban(CommandContext ctx, DiscordMember member, string reason)
        {
            await ctx.Guild.BanMemberAsync(member);
            await member.SendMessageAsync($"You have been banned from {ctx.Guild.Name} for {reason}");
            await ctx.RespondAsync($"Successfully banned {member.DisplayName} for {reason}");
        }

        [Command("unban"), Description("Unbans specified user")]
        [RequirePermissions(Permissions.BanMembers)]
        public async Task Unban(CommandContext ctx, DiscordUser user)
        {
            await ctx.Guild.UnbanMemberAsync(user);
            await ctx.RespondAsync($"Successfully unbanned {user.Username}");
        }

        [Command("kick"), Description("Kicks specified user")]
        [RequirePermissions(Permissions.KickMembers)]
        public async Task Kick(CommandContext ctx, DiscordMember member, string reason)
        {
            await member.SendMessageAsync($"You have been kicked from {ctx.Guild.Name}.");
            await ctx.Guild.RemoveMemberAsync(member);
            await ctx.RespondAsync($"Successfully kicked {member.DisplayName}");
        }

        [Command("ping"), Description("Checks the latency of the client to the server, check if BehemothBot is online")]
        public async Task Ping(CommandContext ctx)
        {
            var embed = new DiscordEmbedBuilder
            {
                Title = "BehemothBot",
                Description = $"{ctx.Client.Ping.ToString()} MS",
            };
            await ctx.RespondAsync(embed: embed);
            
        }

        [Command("serverinfo"), Description("Provides basic information about the discord server")]
        public async Task Serverinfo(CommandContext ctx)
        {
            var embed = new DiscordEmbedBuilder
            {
                Title = ctx.Guild.Name,
                ImageUrl = ctx.Guild.IconUrl,
                Description = $"This server has {ctx.Guild.MemberCount} members, {ctx.Guild.Channels.Count} channels, and {ctx.Guild.Roles.Count} roles. {ctx.Guild.Name} was created on {ctx.Guild.Owner.JoinedAt.DateTime} and is owned by {ctx.Guild.Owner.DisplayName}",
                Color = DiscordColor.Gold,
            };
            await ctx.RespondAsync(embed: embed);
        }

        [Command("userinfo"), Description("Provides basic information about the discord server")]
        public async Task Userinfo(CommandContext ctx, DiscordMember member)
        {
            var user = member.Equals(ctx.User);
            switch (user)
            {
                case true:
                    var embed = new DiscordEmbedBuilder
                    {
                        Title = member.DisplayName,
                        ImageUrl = member.AvatarUrl,
                        Description = $"Your account was created on {member.CreationTimestamp.DateTime}. You joined this server on {member.JoinedAt.DateTime}",
                        Color = DiscordColor.CornflowerBlue,
                    };
                    await ctx.RespondAsync(embed: embed);
                    break;
                case false:
                    var embed2 = new DiscordEmbedBuilder
                    {
                        Title = member.DisplayName,
                        ImageUrl = member.AvatarUrl,
                        Description = $"This users account was created on {member.CreationTimestamp.DateTime}. They joined this server on {member.JoinedAt.DateTime}",
                        Color = DiscordColor.CornflowerBlue,
                    };
                    await ctx.RespondAsync(embed: embed2);
                    break;
            }
        }
          
        [Command("math"), Description("Does simple maths, can do division (div), multiplication (mult), subtraction (sub), and addition (add). (Syntax: -/math (operation) (number1) (number2)")]
        public async Task Math(CommandContext ctx, string op, int x, int y)
        {
            switch (op)
            {
                case "mult":
                    var product = x * y;
                    var embed = new DiscordEmbedBuilder
                    {
                        Title = "Product",
                        Description = product.ToString(),
                        Color = DiscordColor.Azure,
                    };
                    await ctx.RespondAsync(embed: embed);
                    break;
                case "div":
                    var product2 = x / y;
                    var embed2 = new DiscordEmbedBuilder
                    {
                        Title = "Quotient",
                        Description = product2.ToString(),
                        Color = DiscordColor.Azure,
                    };
                    await ctx.RespondAsync(embed: embed2);
                    break;
                case "add":
                    var sum = x += y;
                    var embed3 = new DiscordEmbedBuilder
                    {
                        Title = "Sum",
                        Description = sum.ToString(),
                        Color = DiscordColor.Azure,
                    };
                    await ctx.RespondAsync(embed: embed3);
                    break;
                case "sub":
                    var res = x -= y;
                    var embed4 = new DiscordEmbedBuilder
                    {
                        Title = "Difference",
                        Description = res.ToString(),
                        Color = DiscordColor.Azure,
                    };
                    await ctx.RespondAsync(embed: embed4);
                    break;
            }            
        }

        [Command("autoresponse"), Description("Automatically sends response to specified message. Syntax: -/autoresponse (word to respond to) (automatic response)")]
        [RequirePermissions(Permissions.BanMembers)]
        public async Task Autoresponse(CommandContext ctx, string target, string autores)
        {
            await ctx.RespondAsync("Configuring automated response...");
            ctx.Client.MessageCreated += async e =>
            {
                if (e.Message.Channel.Guild.Equals(ctx.Guild))
                {
                    if (e.Message.Content.Equals(target))
                        await ctx.RespondAsync(autores.ToString());
                }
            };
        }


        [Command("blacklist"), Description("Blacklist specified word, if word is entered in chat it will automatically get deleted. If blacklist level is high any words containing the blacklisted word will get deleted. Low level will only delete messages specifically containing that word. Syntax: -/blacklist (word) (level).)")]
        [RequirePermissions(Permissions.BanMembers)]
        public async Task Blacklist(CommandContext ctx, string black, string level)
        {
            if (level == "low")
            {
                await ctx.RespondAsync($"{black} is now blacklisted at a low level");
                ctx.Client.MessageCreated += async e =>
                {
                    if (e.Message.Channel.Guild.Equals(ctx.Guild))
                    {
                        if (e.Message.Content.Equals(black))
                            await e.Message.DeleteAsync();
                    }
                };
            }
            if (level == "high")
            {
                await ctx.RespondAsync($"{black} is now blacklisted at a high level");
                ctx.Client.MessageCreated += async e =>
                {
                    if (e.Message.Channel.Guild.Equals(ctx.Guild))
                    {
                        if (e.Message.Content.Contains(black))
                            await e.Message.DeleteAsync();
                    }
                };
            }
            
        }

        [Command("timer"), Description("Starts a timer. Syntax: -/timer (time method (sec, min, hour)), time amount (ex; 45, 25)). ")]
        public async Task Ping(CommandContext ctx, string mth, int amt)
        {
            if (amt > 0)
            {
                switch (mth)
                {
                    case "sec":
                        int time = amt * 1000;
                        await ctx.RespondAsync($"Timer set for {amt} seconds");
                        await Task.Delay(time);
                        await ctx.RespondAsync(ctx.User.Mention);
                        var embed = new DiscordEmbedBuilder
                        {
                            Title = $"Timer",
                            Description = $"Timer ended for {amt} seconds",
                            Color = DiscordColor.Aquamarine,
                        };
                        await ctx.RespondAsync(embed: embed);
                        break;
                    case "min":
                        int time2 = amt * 60000;
                        await ctx.RespondAsync($"Timer set for {amt} minutes");
                        await Task.Delay(time2);
                        await ctx.RespondAsync(ctx.User.Mention);
                        var embed2 = new DiscordEmbedBuilder
                        {
                            Title = $"Timer - Minutes",
                            Description = $"Timer ended for {amt} minutes",
                        };
                        await ctx.RespondAsync(embed: embed2);
                        break;
                    case "hour":
                        int time3 = amt * 3600000;
                        await ctx.RespondAsync($"Timer set for {amt} hours");
                        await Task.Delay(time3);
                        await ctx.RespondAsync(ctx.User.Mention);
                        var embed3 = new DiscordEmbedBuilder
                        {
                            Title = $"Timer - Hours",
                            Description = $"Timer ended for {amt} Hours",
                        };
                        await ctx.RespondAsync(embed: embed3);
                        break;
                }
            }
            else if (amt <= 0)
            {
                await ctx.RespondAsync("Number cannot be negative, mr pepper");
            }
        }

        [Command("nick"), Description("Changes nickname of specified user")]
        public async Task Scrape(CommandContext ctx, DiscordMember member, string nick)
        {
            await member.ModifyAsync(nickname: nick);
            await ctx.RespondAsync($"Successfully changed {member.Username}s nickname");
        }

        [Command("hash"), Description("Gets a strings hash code. Syntax: -/hash (string)")]
        public async Task Hash(CommandContext ctx, string item)
        {
            await ctx.RespondAsync(item.GetHashCode().ToString());
        }

        [Command("math2"), Description("Calculates more complicated math. Syntax: -/math2 (operation: Square Root(sqr), Absolute Value(abs), Cosine(cos)) (Number)")]
        public async Task Math2(CommandContext ctx, string op, int x)
        {
           switch (op)
            {
                case "sqr":
                    var sqr = MathF.Sqrt(x);
                    var embed = new DiscordEmbedBuilder
                    {
                        Title = "Square Root",
                        Description = sqr.ToString(),
                        Color = DiscordColor.Azure,
                    };
                    await ctx.RespondAsync(embed: embed);
                    break;
                case "abs":
                    var abs = MathF.Abs(x);
                    var embed2 = new DiscordEmbedBuilder
                    {
                        Title = "Absolute Value",
                        Description = abs.ToString(),
                        Color = DiscordColor.Azure,
                    };
                    await ctx.RespondAsync(embed: embed2);
                    break;
                case "cos":
                    var cos = MathF.Cos(x);
                    var embed3 = new DiscordEmbedBuilder
                    {
                        Title = "Cosine",
                        Description = cos.ToString(),
                        Color = DiscordColor.Azure,
                    };
                    await ctx.RespondAsync(embed: embed3);
                    break;
            }
        }

        [Command("dis"), Description("Executes commands as specified user, (-/dis (user) (command)"), RequireOwner]
        public async Task Dis(CommandContext ctx, [Description("Member to execute as")] DiscordMember member, [RemainingText, Description("Command text to execute")] string command)
        {
            var cmds = ctx.CommandsNext;
            await cmds.SudoAsync(member, ctx.Channel, command);
        }


        [Command("summon"), Description("Sends a message to a specified user. Syntax: -/summon (USERID) (Method to summon (msg = bot will DM target), (mnt = bot will mention target in text channel)). Command has a delay of 10 seconds to prevent spam.")]
        public async Task Summon(CommandContext ctx, long uid, string method)
        {
            var member = ctx.Guild.GetMemberAsync(Convert.ToUInt64(uid)).Result; 
            if (member != ctx.User && !member.IsBot)
            switch (method)
            {
                case "msg":
                    await member.SendMessageAsync($"You have been summoned by {ctx.User.Username} in {ctx.Guild.Name}");
                    await Task.Delay(10000);
                    break;
                case "mnt":
                    await ctx.RespondAsync($"{member.Mention} You have been summoned by {ctx.User.Username}");
                    await Task.Delay(10000);
                    break;

            }
            else
            {
                await ctx.RespondAsync($"Error, You either tried to summon yourself or you tried to summon a bot.");
                await Task.Delay(3000);
            }
        }

        [Command("alarm"), Description("Sets an alarm, only uses military time (24 hour format) Syntax: -/alarm (time), ex: -/alarm (23:43) will ping you at 11:43 PM")]
        public async Task Alarm(CommandContext ctx, string time)
        {
            var val = time.Split(":");
            int hour = Convert.ToInt32(val[0]);
            var minute = Convert.ToInt32(val[1]);

            if (hour >= 0 && hour <= 23 && minute >= 0 && minute < 60)
            {
                var chour = DateTime.Now.Hour;
                var cminute = DateTime.Now.Minute;

                if (minute > cminute)
                {
                    var waithourms = hour -= chour;
                    var waitminutems = minute -= cminute;
                    await ctx.RespondAsync($"Alarm set, I will ping you in {waithourms} hours and {waitminutems} minutes at {time}");

                    var waithour = waithourms * 3600000;
                    var waitminute = waitminutems * 60000;
                    await Task.Delay(waithour + waitminute);

                    await ctx.RespondAsync(ctx.Member.Mention);
                    var embed = new DiscordEmbedBuilder
                    {
                        Title = $"Alarm",
                        Description = $"Alarm Sounding for {DateTime.Now.Hour.ToString()}:{DateTime.Now.Minute.ToString()}",
                        Color = DiscordColor.Aquamarine,
                    };
                    await ctx.RespondAsync(embed: embed);
                }
                else if (minute < cminute)
                {
                    var waithourms2 = hour -= chour;
                    var waitminutems2 = cminute -= minute;
                    await ctx.RespondAsync($"Alarm set, I will ping you in {waithourms2} hours and {waitminutems2} minutes at {time}");

                    var waithour2 = waithourms2 * 3600000;
                    var waitminute2 = waitminutems2 * 60000;
                    await Task.Delay(waithour2 + waitminute2);

                    await ctx.RespondAsync(ctx.Member.Mention);
                    var embed2 = new DiscordEmbedBuilder
                    {
                        Title = $"Alarm",
                        Description = $"Alarm Sounding for {DateTime.Now.Hour.ToString()}:{DateTime.Now.Minute.ToString()}",
                        Color = DiscordColor.Aquamarine,
                    };
                    await ctx.RespondAsync(embed: embed2);
                }
            }
            else
            {
                await ctx.RespondAsync("Error: You either put a time higher than 23 or a negative time");
            }
        }
    }
}
